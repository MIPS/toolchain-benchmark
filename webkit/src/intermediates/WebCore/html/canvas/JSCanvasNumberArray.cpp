/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(3D_CANVAS)

#include "JSCanvasNumberArray.h"

#include "CanvasNumberArray.h"
#include <runtime/JSNumberCell.h>
#include <runtime/PropertyNameArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSCanvasNumberArray);

/* Hash table */

static const HashTableValue JSCanvasNumberArrayTableValues[3] =
{
    { "length", DontDelete|ReadOnly, (intptr_t)jsCanvasNumberArrayLength, (intptr_t)0 },
    { "constructor", DontEnum|ReadOnly, (intptr_t)jsCanvasNumberArrayConstructor, (intptr_t)0 },
    { 0, 0, 0, 0 }
};

static JSC_CONST_HASHTABLE HashTable JSCanvasNumberArrayTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 15, JSCanvasNumberArrayTableValues, 0 };
#else
    { 5, 3, JSCanvasNumberArrayTableValues, 0 };
#endif

/* Hash table for constructor */

static const HashTableValue JSCanvasNumberArrayConstructorTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static JSC_CONST_HASHTABLE HashTable JSCanvasNumberArrayConstructorTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSCanvasNumberArrayConstructorTableValues, 0 };
#else
    { 1, 0, JSCanvasNumberArrayConstructorTableValues, 0 };
#endif

class JSCanvasNumberArrayConstructor : public DOMConstructorObject {
public:
    JSCanvasNumberArrayConstructor(ExecState* exec, JSDOMGlobalObject* globalObject)
        : DOMConstructorObject(JSCanvasNumberArrayConstructor::createStructure(globalObject->objectPrototype()), globalObject)
    {
        putDirect(exec->propertyNames().prototype, JSCanvasNumberArrayPrototype::self(exec, globalObject), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    virtual bool getOwnPropertyDescriptor(ExecState*, const Identifier&, PropertyDescriptor&);
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    static PassRefPtr<Structure> createStructure(JSValue proto) 
    { 
        return Structure::create(proto, TypeInfo(ObjectType, StructureFlags)); 
    }
    
protected:
    static const unsigned StructureFlags = OverridesGetOwnPropertySlot | ImplementsHasInstance | DOMConstructorObject::StructureFlags;
};

const ClassInfo JSCanvasNumberArrayConstructor::s_info = { "CanvasNumberArrayConstructor", 0, &JSCanvasNumberArrayConstructorTable, 0 };

bool JSCanvasNumberArrayConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSCanvasNumberArrayConstructor, DOMObject>(exec, &JSCanvasNumberArrayConstructorTable, this, propertyName, slot);
}

bool JSCanvasNumberArrayConstructor::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSCanvasNumberArrayConstructor, DOMObject>(exec, &JSCanvasNumberArrayConstructorTable, this, propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSCanvasNumberArrayPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static JSC_CONST_HASHTABLE HashTable JSCanvasNumberArrayPrototypeTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSCanvasNumberArrayPrototypeTableValues, 0 };
#else
    { 1, 0, JSCanvasNumberArrayPrototypeTableValues, 0 };
#endif

const ClassInfo JSCanvasNumberArrayPrototype::s_info = { "CanvasNumberArrayPrototype", 0, &JSCanvasNumberArrayPrototypeTable, 0 };

JSObject* JSCanvasNumberArrayPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSCanvasNumberArray>(exec, globalObject);
}

const ClassInfo JSCanvasNumberArray::s_info = { "CanvasNumberArray", 0, &JSCanvasNumberArrayTable, 0 };

JSCanvasNumberArray::JSCanvasNumberArray(NonNullPassRefPtr<Structure> structure, JSDOMGlobalObject* globalObject, PassRefPtr<CanvasNumberArray> impl)
    : DOMObjectWithGlobalPointer(structure, globalObject)
    , m_impl(impl)
{
}

JSCanvasNumberArray::~JSCanvasNumberArray()
{
    forgetDOMObject(this, impl());
}

JSObject* JSCanvasNumberArray::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSCanvasNumberArrayPrototype(JSCanvasNumberArrayPrototype::createStructure(globalObject->objectPrototype()));
}

bool JSCanvasNumberArray::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    bool ok;
    unsigned index = propertyName.toUInt32(&ok, false);
    if (ok && index < static_cast<CanvasNumberArray*>(impl())->length()) {
        slot.setValue(getByIndex(exec, index));
        return true;
    }
    return getStaticValueSlot<JSCanvasNumberArray, Base>(exec, &JSCanvasNumberArrayTable, this, propertyName, slot);
}

bool JSCanvasNumberArray::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    bool ok;
    unsigned index = propertyName.toUInt32(&ok, false);
    if (ok && index < static_cast<CanvasNumberArray*>(impl())->length()) {
        descriptor.setDescriptor(getByIndex(exec, index), DontDelete | ReadOnly);
        return true;
    }
    return getStaticValueDescriptor<JSCanvasNumberArray, Base>(exec, &JSCanvasNumberArrayTable, this, propertyName, descriptor);
}

bool JSCanvasNumberArray::getOwnPropertySlot(ExecState* exec, unsigned propertyName, PropertySlot& slot)
{
    if (propertyName < static_cast<CanvasNumberArray*>(impl())->length()) {
        slot.setValue(getByIndex(exec, propertyName));
        return true;
    }
    return getOwnPropertySlot(exec, Identifier::from(exec, propertyName), slot);
}

JSValue jsCanvasNumberArrayLength(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    JSCanvasNumberArray* castedThis = static_cast<JSCanvasNumberArray*>(asObject(slot.slotBase()));
    UNUSED_PARAM(exec);
    CanvasNumberArray* imp = static_cast<CanvasNumberArray*>(castedThis->impl());
    return jsNumber(exec, imp->length());
}

JSValue jsCanvasNumberArrayConstructor(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    JSCanvasNumberArray* domObject = static_cast<JSCanvasNumberArray*>(asObject(slot.slotBase()));
    return JSCanvasNumberArray::getConstructor(exec, domObject->globalObject());
}
void JSCanvasNumberArray::getOwnPropertyNames(ExecState* exec, PropertyNameArray& propertyNames)
{
    for (unsigned i = 0; i < static_cast<CanvasNumberArray*>(impl())->length(); ++i)
        propertyNames.add(Identifier::from(exec, i));
     Base::getOwnPropertyNames(exec, propertyNames);
}

JSValue JSCanvasNumberArray::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSCanvasNumberArrayConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, CanvasNumberArray* object)
{
    return getDOMObjectWrapper<JSCanvasNumberArray>(exec, globalObject, object);
}
CanvasNumberArray* toCanvasNumberArray(JSC::JSValue value)
{
    return value.inherits(&JSCanvasNumberArray::s_info) ? static_cast<JSCanvasNumberArray*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(3D_CANVAS)
